{"version":3,"sources":["TodoList.js","TodoItems.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TodoList","this","props","inputElement","current","focus","react_default","a","createElement","className","onSubmit","addItem","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","TodoItems","createTasks","item","key","onClick","_this","deleteItem","listItems","entries","map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","filteredItems","state","items","filter","setState","e","target","Date","now","preventDefault","newItem","console","log","toConsumableArray","concat","src","logo","alt","src_TodoList","src_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gQA2BeA,qMAtBXC,KAAKC,MAAMC,aAAaC,QAAQC,yCAIhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUT,KAAKC,MAAMS,SACzBL,EAAAC,EAAAC,cAAA,SACII,YAAY,eACZC,IAAKZ,KAAKC,MAAMC,aAChBW,MAAOb,KAAKC,MAAMa,YAAYC,KAC9BC,SAAUhB,KAAKC,MAAMgB,cAEzBZ,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAb,8BAhBWC,cCgBRC,6MAfbC,YAAc,SAAAC,GACZ,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,EAAKC,IAAKC,QAAS,kBAAMC,EAAKxB,MAAMyB,WAAWJ,EAAKC,OAC1DD,EAAKP,+EAKV,IACMY,EADc3B,KAAKC,MAAM2B,QACDC,IAAI7B,KAAKqB,aAEvC,OAAOhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWmB,UAZZR,aC0DTW,cArDX,SAAAA,IAAc,IAAAL,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAA/B,KAAA8B,IACdL,EAAAM,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnC,QAFAE,aAAekC,IAAMC,YACPZ,EAOhBC,WAAa,SAAAH,GACX,IAAMe,EAAgBb,EAAKc,MAAMC,MAAMC,OAAO,SAAAnB,GAC5C,OAAOA,EAAKC,MAAQA,IAEtBE,EAAKiB,SAAS,CACZF,MAAOF,KAZKb,EAehBR,YAAc,SAAA0B,GACZ,IACM7B,EAAc,CAAEC,KADL4B,EAAEC,OAAO/B,MACYU,IAAKsB,KAAKC,OAChDrB,EAAKiB,SAAS,CACZ5B,iBAnBYW,EAsBhBf,QAAU,SAAAiC,GACNA,EAAEI,iBACF,IAAMC,EAAUvB,EAAKc,MAAMzB,YAC3B,GAAqB,KAAjBkC,EAAQjC,KAAa,CACzBkC,QAAQC,IAAIF,GACV,IAAMR,EAAKT,OAAAoB,EAAA,EAAApB,CAAON,EAAKc,MAAMC,OAAlBY,OAAA,CAAyBJ,IACpCvB,EAAKiB,SAAS,CACdF,MAAOA,EACP1B,YAAa,CAAEC,KAAM,GAAIQ,IAAK,QA5BlCE,EAAKc,MAAQ,CACXC,MAAO,GACP1B,YAAa,CAACC,KAAK,GAAIQ,IAAI,KAJfE,wEAmCd,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAK8C,IAAKC,IAAM9C,UAAU,WAAW+C,IAAI,SACvClD,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACiD,EAAD,CACI9C,QAASV,KAAKU,QACdR,aAAcF,KAAKE,aACnBe,YAAajB,KAAKiB,YAClBH,YAAad,KAAKuC,MAAMzB,cAE5BT,EAAAC,EAAAC,cAACkD,EAAD,CAAW7B,QAAS5B,KAAKuC,MAAMC,MAAOd,WAAY1B,KAAK0B,sBAhDjDP,aCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.2a11cf40.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\n\nclass TodoList extends Component {\n   componentDidUpdate() {\n    this.props.inputElement.current.focus()\n  }\n    \n    render() {\n    return (\n      <div className=\"todoListMain\">\n        <div className=\"header\">\n          <form onSubmit={this.props.addItem}>\n            <input \n                placeholder=\"To Do Item..\" \n                ref={this.props.inputElement}\n                value={this.props.currentItem.text}\n                onChange={this.props.handleInput}\n            />\n            <button type=\"submit\"> Add To Do Item </button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TodoList","import React, { Component } from 'react'\nimport './App.css';\n\nclass TodoItems extends Component {\n  createTasks = item => {\n    return (\n      <li key={item.key} onClick={() => this.props.deleteItem(item.key)}>\n        {item.text}\n      </li>\n    )\n  }\n  render() {\n    const todoEntries = this.props.entries\n    const listItems = todoEntries.map(this.createTasks)\n\n    return <ul className=\"theList\">{listItems}</ul>\n  }\n}\n\nexport default TodoItems","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList';\nimport TodoItems from './TodoItems';\n\nclass App extends Component {\n    inputElement = React.createRef()\n    constructor() {\n    super()\n    this.state = {\n      items: [],\n      currentItem: {text:'', key:''},\n    }\n  }\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key\n    })\n    this.setState({\n      items: filteredItems,\n    })\n  }\n  handleInput = e => {\n    const itemText = e.target.value\n    const currentItem = { text: itemText, key: Date.now() }\n    this.setState({\n      currentItem,\n    })\n  }\n  addItem = e => {\n      e.preventDefault()\n      const newItem = this.state.currentItem\n      if (newItem.text !== '') {\n      console.log(newItem)\n        const items = [...this.state.items, newItem]\n        this.setState({\n        items: items,\n        currentItem: { text: '', key: '' },\n      })\n    }\n  }\n    render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>React To Do List</h1>\n            <TodoList \n                addItem={this.addItem}\n                inputElement={this.inputElement}\n                handleInput={this.handleInput}\n                currentItem={this.state.currentItem}\n            />\n            <TodoItems entries={this.state.items} deleteItem={this.deleteItem} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}